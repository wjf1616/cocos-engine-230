
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/letter-font.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _bmfont = _interopRequireDefault(require("../../webgl/assemblers/label/2d/bmfont"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var Label = require('../../../components/CCLabel');

var LabelOutline = require('../../../components/CCLabelOutline');

var textUtils = require('../../../utils/text-utils');

var Component = require('../../../components/CCComponent');

var RenderTexture = require('../../../assets/CCRenderTexture');

var OUTLINE_SUPPORTED = cc.js.isChildClassOf(LabelOutline, Component);

var getFontFamily = require('../utils').getFontFamily;

var shareLabelInfo = require('../utils').shareLabelInfo;

var FontLetterDefinition = cc.BitmapFont.FontLetterDefinition;
var FontAtlas = cc.BitmapFont.FontAtlas;
var WHITE = cc.Color.WHITE;
var space = 0;
var bleed = 2;

var _invisibleAlpha = (1 / 255).toFixed(3);

function LetterTexture(_char, labelInfo) {
  this._texture = null;
  this._labelInfo = labelInfo;
  this._char = _char;
  this._hash = null;
  this._data = null;
  this._canvas = null;
  this._context = null;
  this._width = 0;
  this._height = 0;
  this._offsetY = 0;
  this._hash = _char.charCodeAt(0) + labelInfo.hash;
}

LetterTexture.prototype = {
  constructor: LetterTexture,
  updateRenderData: function updateRenderData() {
    this._updateProperties();

    this._updateTexture();
  },
  _updateProperties: function _updateProperties() {
    this._texture = new cc.Texture2D();
    this._data = Label._canvasPool.get();
    this._canvas = this._data.canvas;
    this._context = this._data.context;
    this._context.font = this._labelInfo.fontDesc;
    var width = textUtils.safeMeasureText(this._context, this._char, this._labelInfo.fontDesc);
    var blank = this._labelInfo.margin * 2 + bleed;
    this._width = parseFloat(width.toFixed(2)) + blank;
    this._height = (1 + textUtils.BASELINE_RATIO) * this._labelInfo.fontSize + blank;
    this._offsetY = -(this._labelInfo.fontSize * textUtils.BASELINE_RATIO) / 2;

    if (this._canvas.width !== this._width) {
      this._canvas.width = this._width;
    }

    if (this._canvas.height !== this._height) {
      this._canvas.height = this._height;
    }

    this._texture.initWithElement(this._canvas);
  },
  _updateTexture: function _updateTexture() {
    var context = this._context;
    var labelInfo = this._labelInfo,
        width = this._canvas.width,
        height = this._canvas.height;
    var startX = width / 2;
    var startY = height / 2 + this._labelInfo.fontSize * textUtils.MIDDLE_RATIO;
    var color = labelInfo.color;
    context.textAlign = 'center';
    context.textBaseline = 'alphabetic';
    context.clearRect(0, 0, width, height); //Add a white background to avoid black edges.

    context.fillStyle = "rgba(" + color.r + ", " + color.g + ", " + color.b + ", " + _invisibleAlpha + ")";
    context.fillRect(0, 0, width, height);
    context.font = labelInfo.fontDesc; //use round for line join to avoid sharp intersect point

    context.lineJoin = 'round';
    context.fillStyle = "rgba(" + color.r + ", " + color.g + ", " + color.b + ", 1)";

    if (labelInfo.isOutlined && labelInfo.margin > 0) {
      var strokeColor = labelInfo.out || WHITE;
      context.strokeStyle = "rgba(" + strokeColor.r + ", " + strokeColor.g + ", " + strokeColor.b + ", " + strokeColor.a / 255 + ")";
      context.lineWidth = labelInfo.margin * 2;
      context.strokeText(this._char, startX, startY);
    }

    context.fillText(this._char, startX, startY);

    this._texture.handleLoadedTexture();
  },
  destroy: function destroy() {
    this._texture.destroy();

    this._texture = null;

    Label._canvasPool.put(this._data);
  }
};

function LetterAtlas(width, height) {
  var texture = new RenderTexture();
  texture.initWithSize(width, height);
  texture.update();
  this._fontDefDictionary = new FontAtlas(texture);
  this._x = space;
  this._y = space;
  this._nexty = space;
  this._width = width;
  this._height = height;
  cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
}

cc.js.mixin(LetterAtlas.prototype, {
  insertLetterTexture: function insertLetterTexture(letterTexture) {
    var texture = letterTexture._texture;
    var width = texture.width,
        height = texture.height;

    if (this._x + width + space > this._width) {
      this._x = space;
      this._y = this._nexty;
    }

    if (this._y + height > this._nexty) {
      this._nexty = this._y + height + space;
    }

    if (this._nexty > this._height) {
      return null;
    }

    this._fontDefDictionary._texture.drawTextureAt(texture, this._x, this._y);

    this._dirty = true;
    var letter = new FontLetterDefinition();
    letter.u = this._x + bleed / 2;
    letter.v = this._y + bleed / 2;
    letter.texture = this._fontDefDictionary._texture;
    letter.valid = true;
    letter.w = letterTexture._width - bleed;
    letter.h = letterTexture._height - bleed;
    letter.xAdvance = letter.w;
    letter.offsetY = letterTexture._offsetY;
    this._x += width + space;

    this._fontDefDictionary.addLetterDefinitions(letterTexture._hash, letter);

    return letter;
  },
  update: function update() {
    if (!this._dirty) return;

    this._fontDefDictionary._texture.update();

    this._dirty = false;
  },
  reset: function reset() {
    this._x = space;
    this._y = space;
    this._nexty = space;
    var chars = this._fontDefDictionary._letterDefinitions;

    for (var i = 0, l = chars.length; i < l; i++) {
      var _char2 = chars[i];

      if (!_char2.isValid) {
        continue;
      }

      _char2.destroy();
    }

    this._fontDefDictionary.clear();
  },
  destroy: function destroy() {
    this.reset();

    this._fontDefDictionary._texture.destroy();

    this._fontDefDictionary._texture = null;
  },
  beforeSceneLoad: function beforeSceneLoad() {
    this.clearAllCache();
  },
  clearAllCache: function clearAllCache() {
    this.destroy();
    var texture = new RenderTexture();
    texture.initWithSize(this._width, this._height);
    texture.update();
    this._fontDefDictionary._texture = texture;
  },
  getLetter: function getLetter(key) {
    return this._fontDefDictionary._letterDefinitions[key];
  },
  getTexture: function getTexture() {
    return this._fontDefDictionary.getTexture();
  },
  getLetterDefinitionForChar: function getLetterDefinitionForChar(_char3, labelInfo) {
    var hash = _char3.charCodeAt(0) + labelInfo.hash;
    var letter = this._fontDefDictionary._letterDefinitions[hash];

    if (!letter) {
      var temp = new LetterTexture(_char3, labelInfo);
      temp.updateRenderData();
      letter = this.insertLetterTexture(temp);
      temp.destroy();
    }

    return letter;
  }
});

function computeHash(labelInfo) {
  var hashData = '';
  var color = labelInfo.color.toHEX("#rrggbb");
  var out = '';

  if (labelInfo.isOutlined && labelInfo.margin > 0) {
    out = out + labelInfo.margin + labelInfo.out.toHEX("#rrggbb");
  }

  ;
  return hashData + labelInfo.fontSize + labelInfo.fontFamily + color + out;
}

var _shareAtlas = null;
var _atlasWidth = 2048;
var _atlasHeight = 2048;
var _isBold = false;

var LetterFontAssembler =
/*#__PURE__*/
function (_WebglBmfontAssembler) {
  _inheritsLoose(LetterFontAssembler, _WebglBmfontAssembler);

  function LetterFontAssembler() {
    return _WebglBmfontAssembler.apply(this, arguments) || this;
  }

  var _proto = LetterFontAssembler.prototype;

  _proto._getAssemblerData = function _getAssemblerData() {
    if (!_shareAtlas) {
      _shareAtlas = new LetterAtlas(_atlasWidth, _atlasHeight);
      cc.Label._shareAtlas = _shareAtlas;
    }

    return _shareAtlas.getTexture();
  };

  _proto._updateFontFamily = function _updateFontFamily(comp) {
    shareLabelInfo.fontAtlas = _shareAtlas;
    shareLabelInfo.fontFamily = getFontFamily(comp); // outline

    var outline = OUTLINE_SUPPORTED && comp.getComponent(LabelOutline);

    if (outline && outline.enabled) {
      shareLabelInfo.isOutlined = true;
      shareLabelInfo.margin = outline.width;
      shareLabelInfo.out = outline.color.clone();
      shareLabelInfo.out.a = outline.color.a * comp.node.color.a / 255.0;
    } else {
      shareLabelInfo.isOutlined = false;
      shareLabelInfo.margin = 0;
    }
  };

  _proto._updateLabelInfo = function _updateLabelInfo(comp) {
    shareLabelInfo.fontDesc = this._getFontDesc();
    shareLabelInfo.color = comp.node.color;
    shareLabelInfo.hash = computeHash(shareLabelInfo);
  };

  _proto._getFontDesc = function _getFontDesc() {
    var fontDesc = shareLabelInfo.fontSize.toString() + 'px ';
    fontDesc = fontDesc + shareLabelInfo.fontFamily;

    if (_isBold) {
      fontDesc = "bold " + fontDesc;
    }

    return fontDesc;
  };

  _proto._computeHorizontalKerningForText = function _computeHorizontalKerningForText() {};

  _proto._determineRect = function _determineRect(tempRect) {
    return false;
  };

  return LetterFontAssembler;
}(_bmfont["default"]);

exports["default"] = LetterFontAssembler;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,