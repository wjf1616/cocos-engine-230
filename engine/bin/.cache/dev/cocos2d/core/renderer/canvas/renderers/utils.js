
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/utils.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var WHITE = (255 << 16) + (255 << 8) + 255;
var MAX_CANVAS_COUNT = 32;

function colorizedFrame(canvas, texture, color, sx, sy, sw, sh) {
  var image = texture._image;
  var ctx = canvas.getContext("2d");
  canvas.width = sw;
  canvas.height = sh; // Draw color

  ctx.globalCompositeOperation = 'source-over';
  ctx.fillStyle = 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';
  ctx.fillRect(0, 0, sw, sh); // Multiply color with texture

  ctx.globalCompositeOperation = 'multiply';
  ctx.drawImage(image, sx, sy, sw, sh, 0, 0, sw, sh); // Clip out transparent pixels

  ctx.globalCompositeOperation = "destination-atop";
  ctx.drawImage(image, sx, sy, sw, sh, 0, 0, sw, sh);
  return canvas;
}

var canvasMgr = {
  canvasMap: {},
  canvasUsed: {},
  canvasPool: [],
  checking: false,
  check: function check() {
    var exist = false;

    for (var key in this.canvasUsed) {
      exist = true;

      if (!this.canvasUsed[key]) {
        var canvas = this.canvasMap[key];
        canvas.width = 0;
        canvas.height = 0;

        if (this.canvasPool.length < 32) {
          this.canvasPool.push(canvas);
        }

        delete this.canvasMap[key];
        delete this.canvasUsed[key];
      } else {
        this.canvasUsed[key] = false;
      }
    }

    if (!exist) {
      cc.director.off(cc.Director.EVENT_AFTER_DRAW, this.check, this);
      this.checking = false;
    }
  },
  startCheck: function startCheck() {
    cc.director.on(cc.Director.EVENT_AFTER_DRAW, this.check, this);
    this.checking = true;
  },
  getCanvas: function getCanvas(key) {
    this.canvasUsed[key] = true;
    return this.canvasMap[key];
  },
  cacheCanvas: function cacheCanvas(canvas, key) {
    this.canvasMap[key] = canvas;
    this.canvasUsed[key] = true;

    if (!this.checking) {
      this.startCheck();
    }
  },
  dropImage: function dropImage(key) {
    if (this.canvasMap[key]) {
      delete this.canvasMap[key];
    }
  }
};
module.exports = {
  getColorizedImage: function getColorizedImage(texture, color) {
    if (!texture) return null;
    if (texture.width === 0 || texture.height === 0) return texture._image; // original image

    var cval = color._val & 0x00ffffff;

    if (cval === WHITE) {
      return texture._image;
    } // get from cache


    var key = texture.url + cval;
    var cache = canvasMgr.getCanvas(key);

    if (!cache) {
      cache = canvasMgr.canvasPool.pop() || document.createElement("canvas");
      colorizedFrame(cache, texture, color, 0, 0, texture.width, texture.height);
      canvasMgr.cacheCanvas(cache, key);
    }

    return cache;
  },
  getFrameCache: function getFrameCache(texture, color, sx, sy, sw, sh) {
    if (!texture || !texture.url || sx < 0 || sy < 0 || sw <= 0 || sh <= 0) {
      return null;
    }

    var key = texture.url;
    var generate = false;
    var cval = color._val & 0x00ffffff;

    if (cval !== WHITE) {
      key += cval;
      generate = true;
    }

    if (sx !== 0 || sy !== 0 && sw !== texture.width && sh !== texture.height) {
      key += '_' + sx + '_' + sy + '_' + sw + '_' + sh;
      generate = true;
    }

    if (!generate) {
      return texture._image;
    } // get from cache


    var cache = canvasMgr.getCanvas(key);

    if (!cache) {
      cache = canvasMgr.canvasPool.pop() || document.createElement("canvas");
      colorizedFrame(cache, texture, color, sx, sy, sw, sh);
      canvasMgr.cacheCanvas(cache, key);
    }

    return cache;
  },
  dropColorizedImage: function dropColorizedImage(texture, color) {
    var key = texture.url + (color._val & 0x00ffffff);
    canvasMgr.dropImage(key);
  }
}; // cache context data of device.

var _globalAlpha = -1;

var context = {
  setGlobalAlpha: function setGlobalAlpha(ctx, alpha) {
    if (_globalAlpha === alpha) {
      return;
    }

    _globalAlpha = alpha;
    ctx.globalAlpha = _globalAlpha;
  },
  reset: function reset() {
    _globalAlpha = -1;
  }
};
module.exports.context = context;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbIldISVRFIiwiTUFYX0NBTlZBU19DT1VOVCIsImNvbG9yaXplZEZyYW1lIiwiY2FudmFzIiwidGV4dHVyZSIsImNvbG9yIiwic3giLCJzeSIsInN3Iiwic2giLCJpbWFnZSIsIl9pbWFnZSIsImN0eCIsImdldENvbnRleHQiLCJ3aWR0aCIsImhlaWdodCIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImZpbGxTdHlsZSIsInIiLCJnIiwiYiIsImZpbGxSZWN0IiwiZHJhd0ltYWdlIiwiY2FudmFzTWdyIiwiY2FudmFzTWFwIiwiY2FudmFzVXNlZCIsImNhbnZhc1Bvb2wiLCJjaGVja2luZyIsImNoZWNrIiwiZXhpc3QiLCJrZXkiLCJsZW5ndGgiLCJwdXNoIiwiY2MiLCJkaXJlY3RvciIsIm9mZiIsIkRpcmVjdG9yIiwiRVZFTlRfQUZURVJfRFJBVyIsInN0YXJ0Q2hlY2siLCJvbiIsImdldENhbnZhcyIsImNhY2hlQ2FudmFzIiwiZHJvcEltYWdlIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldENvbG9yaXplZEltYWdlIiwiY3ZhbCIsIl92YWwiLCJ1cmwiLCJjYWNoZSIsInBvcCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldEZyYW1lQ2FjaGUiLCJnZW5lcmF0ZSIsImRyb3BDb2xvcml6ZWRJbWFnZSIsIl9nbG9iYWxBbHBoYSIsImNvbnRleHQiLCJzZXRHbG9iYWxBbHBoYSIsImFscGhhIiwiZ2xvYmFsQWxwaGEiLCJyZXNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsSUFBTUEsS0FBSyxHQUFHLENBQUMsT0FBSyxFQUFOLEtBQWEsT0FBSyxDQUFsQixJQUF1QixHQUFyQztBQUNBLElBQU1DLGdCQUFnQixHQUFHLEVBQXpCOztBQUVBLFNBQVNDLGNBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDQyxPQUFqQyxFQUEwQ0MsS0FBMUMsRUFBaURD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S0FwRGhCLEVBb0R1QjtBQUNoQyxRQUFJeUIsR0FBRyxHQUFHMUIsT0FBTyxDQUFDNEMsR0FBUixJQUFlM0MsS0FBSyxDQUFDMEMsSUFBTixHQUFhLFVBQTVCLENBQVY7QUFDQXhCLElBQUFBLFNBQVMsQ0FBQ21CLFNBQVYsQ0FBb0JaLEdBQXBCO0FBQ0g7QUF2RFksQ0FBakIsRUEwREE7O0FBQ0EsSUFBSTBCLFlBQVksR0FBRyxDQUFDLENBQXBCOztBQUVBLElBQUlDLE9BQU8sR0FBRztBQUNWQyxFQUFBQSxjQURVLDBCQUNNOUMsR0FETixFQUNXK0MsS0FEWCxFQUNrQjtBQUN4QixRQUFJSCxZQUFZLEtBQUtHLEtBQXJCLEVBQTRCO0FBQ3hCO0FBQ0g7O0FBRURILElBQUFBLFlBQVksR0FBR0csS0FBZjtBQUNBL0MsSUFBQUEsR0FBRyxDQUFDZ0QsV0FBSixHQUFrQkosWUFBbEI7QUFDSCxHQVJTO0FBVVZLLEVBQUFBLEtBVlUsbUJBVUQ7QUFDTEwsSUFBQUEsWUFBWSxHQUFHLENBQUMsQ0FBaEI7QUFDSDtBQVpTLENBQWQ7QUFlQWIsTUFBTSxDQUFDQyxPQUFQLENBQWVhLE9BQWYsR0FBeUJBLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgV0hJVEUgPSAoMjU1PDwxNikgKyAoMjU1PDw4KSArIDI1NTtcbmNvbnN0IE1BWF9DQU5WQVNfQ09VTlQgPSAzMjtcblxuZnVuY3Rpb24gY29sb3JpemVkRnJhbWUgKGNhbnZhcywgdGV4dHVyZSwgY29sb3IsIHN4LCBzeSwgc3csIHNoKSB7XG4gICAgbGV0IGltYWdlID0gdGV4dHVyZS5faW1hZ2U7XG5cbiAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjYW52YXMud2lkdGggPSBzdztcbiAgICBjYW52YXMuaGVpZ2h0ID0gc2g7XG5cbiAgICAvLyBEcmF3IGNvbG9yXG4gICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2IoJyArIGNvbG9yLnIgKyAnLCcgKyBjb2xvci5nICsgJywnICsgY29sb3IuYiArICcpJztcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgc3csIHNoKTtcblxuICAgIC8vIE11bHRpcGx5IGNvbG9yIHdpdGggdGV4dHVyZVxuICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnbXVsdGlwbHknO1xuICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgc3csIHNoLCAwLCAwLCBzdywgc2gpO1xuXG4gICAgLy8gQ2xpcCBvdXQgdHJhbnNwYXJlbnQgcGl4ZWxzXG4gICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24tYXRvcFwiO1xuICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgc3csIHNoLCAwLCAwLCBzdywgc2gpO1xuICAgIHJldHVybiBjYW52YXM7XG59XG5cbmxldCBjYW52YXNNZ3IgPSB7XG4gICAgY2FudmFzTWFwOiB7fSxcbiAgICBjYW52YXNVc2VkOiB7fSxcbiAgICBjYW52YXNQb29sOiBbXSxcblxuICAgIGNoZWNraW5nOiBmYWxzZSxcblxuICAgIGNoZWNrICgpIHtcbiAgICAgICAgbGV0IGV4aXN0ID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmNhbnZhc1VzZWQpIHtcbiAgICAgICAgICAgIGV4aXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYW52YXNVc2VkW2tleV0pIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FudmFzID0gdGhpcy5jYW52YXNNYXBba2V5XTtcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSAwO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbnZhc1Bvb2wubGVuZ3RoIDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNQb29sLnB1c2goY2FudmFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FudmFzTWFwW2tleV07XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FudmFzVXNlZFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXNVc2VkW2tleV0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4aXN0KSB7XG4gICAgICAgICAgICBjYy5kaXJlY3Rvci5vZmYoY2MuRGlyZWN0b3IuRVZFTlRfQUZURVJfRFJBVywgdGhpcy5jaGVjaywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmNoZWNraW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RhcnRDaGVjayAoKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLm9uKGNjLkRpcmVjdG9yLkVWRU5UX0FGVEVSX0RSQVcsIHRoaXMuY2hlY2ssIHRoaXMpO1xuICAgICAgICB0aGlzLmNoZWNraW5nID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZ2V0Q2FudmFzIChrZXkpIHtcbiAgICAgICAgdGhpcy5jYW52YXNVc2VkW2tleV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXNNYXBba2V5XTtcbiAgICB9LFxuXG4gICAgY2FjaGVDYW52YXMgKGNhbnZhcywga2V5KSB7XG4gICAgICAgIHRoaXMuY2FudmFzTWFwW2tleV0gPSBjYW52YXM7XG4gICAgICAgIHRoaXMuY2FudmFzVXNlZFtrZXldID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNraW5nKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q2hlY2soKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgZHJvcEltYWdlIChrZXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzTWFwW2tleV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhbnZhc01hcFtrZXldO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZ2V0Q29sb3JpemVkSW1hZ2UgKHRleHR1cmUsIGNvbG9yKSB7XG4gICAgICAgIGlmICghdGV4dHVyZSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICh0ZXh0dXJlLndpZHRoID09PSAwIHx8IHRleHR1cmUuaGVpZ2h0ID09PSAwKSAgcmV0dXJuIHRleHR1cmUuX2ltYWdlO1xuXG4gICAgICAgIC8vIG9yaWdpbmFsIGltYWdlXG4gICAgICAgIGxldCBjdmFsID0gY29sb3IuX3ZhbCAmIDB4MDBmZmZmZmY7XG4gICAgICAgIGlmIChjdmFsID09PSBXSElURSkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUuX2ltYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2V0IGZyb20gY2FjaGVcbiAgICAgICAgbGV0IGtleSA9IHRleHR1cmUudXJsICsgY3ZhbDtcbiAgICAgICAgbGV0IGNhY2hlID0gY2FudmFzTWdyLmdldENhbnZhcyhrZXkpO1xuICAgICAgICBpZiAoIWNhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZSA9IGNhbnZhc01nci5jYW52YXNQb29sLnBvcCgpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgICAgICBjb2xvcml6ZWRGcmFtZShjYWNoZSwgdGV4dHVyZSwgY29sb3IsIDAsIDAsIHRleHR1cmUud2lkdGgsIHRleHR1cmUuaGVpZ2h0KTtcbiAgICAgICAgICAgIGNhbnZhc01nci5jYWNoZUNhbnZhcyhjYWNoZSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgfSxcblxuICAgIGdldEZyYW1lQ2FjaGUgKHRleHR1cmUsIGNvbG9yLCBzeCwgc3ksIHN3LCBzaCkge1xuICAgICAgICBpZiAoIXRleHR1cmUgfHwgIXRleHR1cmUudXJsIHx8IHN4IDwgMCB8fCBzeSA8IDAgfHwgc3cgPD0gMCB8fCBzaCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBrZXkgPSB0ZXh0dXJlLnVybDtcbiAgICAgICAgbGV0IGdlbmVyYXRlID0gZmFsc2U7XG4gICAgICAgIGxldCBjdmFsID0gY29sb3IuX3ZhbCAmIDB4MDBmZmZmZmY7XG4gICAgICAgIGlmIChjdmFsICE9PSBXSElURSkge1xuICAgICAgICAgICAga2V5ICs9IGN2YWw7XG4gICAgICAgICAgICBnZW5lcmF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN4ICE9PSAwIHx8IHN5ICE9PSAwICYmIHN3ICE9PSB0ZXh0dXJlLndpZHRoICYmIHNoICE9PSB0ZXh0dXJlLmhlaWdodCkge1xuICAgICAgICAgICAga2V5ICs9ICdfJyArIHN4ICsgJ18nICsgc3kgKyAnXycgKyBzdyArICdfJyArIHNoO1xuICAgICAgICAgICAgZ2VuZXJhdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZ2VuZXJhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlLl9pbWFnZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gZ2V0IGZyb20gY2FjaGVcbiAgICAgICAgbGV0IGNhY2hlID0gY2FudmFzTWdyLmdldENhbnZhcyhrZXkpO1xuICAgICAgICBpZiAoIWNhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZSA9IGNhbnZhc01nci5jYW52YXNQb29sLnBvcCgpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgICAgICBjb2xvcml6ZWRGcmFtZShjYWNoZSwgdGV4dHVyZSwgY29sb3IsIHN4LCBzeSwgc3csIHNoKTtcbiAgICAgICAgICAgIGNhbnZhc01nci5jYWNoZUNhbnZhcyhjYWNoZSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgfSxcblxuICAgIGRyb3BDb2xvcml6ZWRJbWFnZSAodGV4dHVyZSwgY29sb3IpIHtcbiAgICAgICAgbGV0IGtleSA9IHRleHR1cmUudXJsICsgKGNvbG9yLl92YWwgJiAweDAwZmZmZmZmKTtcbiAgICAgICAgY2FudmFzTWdyLmRyb3BJbWFnZShrZXkpO1xuICAgIH1cbn07XG5cbi8vIGNhY2hlIGNvbnRleHQgZGF0YSBvZiBkZXZpY2UuXG5sZXQgX2dsb2JhbEFscGhhID0gLTE7XG5cbmxldCBjb250ZXh0ID0ge1xuICAgIHNldEdsb2JhbEFscGhhIChjdHgsIGFscGhhKSB7XG4gICAgICAgIGlmIChfZ2xvYmFsQWxwaGEgPT09IGFscGhhKSB7XG4gICAgICAgICAgICByZXR1cm4gXG4gICAgICAgIH1cblxuICAgICAgICBfZ2xvYmFsQWxwaGEgPSBhbHBoYTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gX2dsb2JhbEFscGhhO1xuICAgIH0sXG5cbiAgICByZXNldCAoKSB7XG4gICAgICAgIF9nbG9iYWxBbHBoYSA9IC0xO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuY29udGV4dCA9IGNvbnRleHQ7Il19