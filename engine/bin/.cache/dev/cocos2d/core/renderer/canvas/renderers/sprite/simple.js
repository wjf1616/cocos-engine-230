
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/simple.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler = _interopRequireDefault(require("../../../assembler"));

var _renderData = _interopRequireDefault(require("../render-data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var utils = require('../utils');

var CanvasSimpleSprite =
/*#__PURE__*/
function (_Assembler) {
  _inheritsLoose(CanvasSimpleSprite, _Assembler);

  function CanvasSimpleSprite() {
    return _Assembler.apply(this, arguments) || this;
  }

  var _proto = CanvasSimpleSprite.prototype;

  _proto.init = function init() {
    this._renderData = new _renderData["default"]();
    this._renderData.dataLength = 2;
  };

  _proto.updateRenderData = function updateRenderData(sprite) {
    if (sprite._vertsDirty) {
      this.updateUVs(sprite);
      this.updateVerts(sprite);
      sprite._vertsDirty = false;
    }
  };

  _proto.updateUVs = function updateUVs(sprite) {
    var frame = sprite.spriteFrame;
    var renderData = this._renderData;
    var verts = renderData.vertices;
    var rect = frame._rect;

    if (frame._rotated) {
      var l = rect.x;
      var r = rect.width;
      var b = rect.y;
      var t = rect.height;
      verts[0].u = l;
      verts[0].v = b;
      verts[1].u = t;
      verts[1].v = r;
    } else {
      var _l = rect.x;
      var _r = rect.width;
      var _b = rect.y;
      var _t = rect.height;
      verts[0].u = _l;
      verts[0].v = _b;
      verts[1].u = _r;
      verts[1].v = _t;
    }
  };

  _proto.updateVerts = function updateVerts(sprite) {
    var renderData = this._renderData,
        node = sprite.node,
        verts = renderData.vertices,
        frame = sprite.spriteFrame,
        cw = node.width,
        ch = node.height,
        appx = node.anchorX * cw,
        appy = node.anchorY * ch,
        l,
        b,
        r,
        t;

    if (sprite.trim) {
      l = -appx;
      b = -appy;
      r = cw;
      t = ch;
    } else {
      var ow = frame._originalSize.width,
          oh = frame._originalSize.height,
          rw = frame._rect.width,
          rh = frame._rect.height,
          offset = frame._offset,
          scaleX = cw / ow,
          scaleY = ch / oh;
      var trimLeft = offset.x + (ow - rw) / 2;
      var trimBottom = offset.y + (oh - rh) / 2;
      l = trimLeft * scaleX - appx;
      b = trimBottom * scaleY - appy;
      r = cw;
      t = ch;
    }

    if (frame._rotated) {
      verts[0].y = l;
      verts[0].x = b;
      verts[1].y = r;
      verts[1].x = t;
    } else {
      verts[0].x = l;
      verts[0].y = b;
      verts[1].x = r;
      verts[1].y = t;
    }

    renderData.vertDirty = false;
  };

  _proto.draw = function draw(ctx, comp) {
    var node = comp.node;
    var frame = comp._spriteFrame; // Transform

    var matrix = node._worldMatrix;
    var matrixm = matrix.m;
    var a = matrixm[0],
        b = matrixm[1],
        c = matrixm[4],
        d = matrixm[5],
        tx = matrixm[12],
        ty = matrixm[13];
    ctx.transform(a, b, c, d, tx, ty);
    ctx.scale(1, -1);

    if (frame._rotated) {
      ctx.rotate(-Math.PI / 2);
    } // TODO: handle blend function
    // opacity


    utils.context.setGlobalAlpha(ctx, node.opacity / 255);
    var tex = frame._texture,
        verts = this._renderData.vertices;
    var image = utils.getColorizedImage(tex, node._color);
    var x = verts[0].x;
    var y = verts[0].y;
    var w = verts[1].x;
    var h = verts[1].y;
    y = -y - h;
    var sx = verts[0].u;
    var sy = verts[0].v;
    var sw = verts[1].u;
    var sh = verts[1].v;
    ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
    return 1;
  };

  return CanvasSimpleSprite;
}(_assembler["default"]);

exports["default"] = CanvasSimpleSprite;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,