
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/assets/material/effect-parser.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports.parseEffect = parseEffect;

var _pass = _interopRequireDefault(require("../../../renderer/core/pass"));

var _types = require("../../../renderer/types");

var _enums = _interopRequireDefault(require("../../../renderer/enums"));

var _effect = _interopRequireDefault(require("./effect"));

var _technique = _interopRequireDefault(require("../../../renderer/core/technique"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getInvolvedProgram(programName) {
  var lib = cc.renderer._forward._programLib;
  return lib.getTemplate(programName);
} // extract properties from each passes and check whether properties is defined but not used.


function parseProperties(effectAsset, passJson) {
  var propertiesJson = passJson.properties || {};
  var program = getInvolvedProgram(passJson.program); // check whether properties are defined in the shaders 

  var _loop = function _loop(prop) {
    var uniformInfo = program.uniforms.find(function (u) {
      return u.name === prop;
    }); // the property is not defined in all the shaders used in techs

    if (!uniformInfo) {
      cc.warnID(9107, effectAsset.name, prop);
      return "continue";
    }
  };

  for (var prop in propertiesJson) {
    var _ret = _loop(prop);

    if (_ret === "continue") continue;
  } // create properties


  var properties = {};
  program.uniforms.forEach(function (u) {
    var name = u.name,
        prop = properties[name] = Object.assign({}, u),
        propInfo = propertiesJson[name];
    var value = _types.enums2default[u.type];

    if (propInfo) {
      if (propInfo.type === _enums["default"].PARAM_TEXTURE_2D) {
        value = null;
      } else if (propInfo.type === _enums["default"].PARAM_INT || propInfo.type === _enums["default"].PARAM_FLOAT) {
        value = Array.isArray(propInfo.value) ? propInfo.value[0] : propInfo.value;
      } else {
        value = new Float32Array(propInfo.value);
      }
    } else {
      value = _types.enums2default[u.type];
    }

    prop.value = value;
  });
  return properties;
}

;

function passDefines(pass) {
  var defines = {};
  var program = getInvolvedProgram(pass.program);
  program.defines.forEach(function (d) {
    defines[d.name] = _types.enums2default[d.type];
  });
  return defines;
}

function parseTechniques(effectAsset) {
  var techNum = effectAsset.techniques.length;
  var techniques = new Array(techNum);

  for (var j = 0; j < techNum; ++j) {
    var tech = effectAsset.techniques[j];
    var techName = tech.name || j;
    var passNum = tech.passes.length;
    var passes = new Array(passNum);

    for (var k = 0; k < passNum; ++k) {
      var pass = tech.passes[k];
      var passName = pass.name || k;
      var detailName = effectAsset.name + "-" + techName + "-" + passName;
      var stage = pass.stage || 'opaque';
      var properties = parseProperties(effectAsset, pass);
      var defines = passDefines(pass);
      var newPass = passes[k] = new _pass["default"](passName, detailName, pass.program, stage, properties, defines); // rasterizer state

      if (pass.rasterizerState) {
        newPass.setCullMode(pass.rasterizerState.cullMode);
      } // blend state


      var blendState = pass.blendState && pass.blendState.targets[0];

      if (blendState) {
        newPass.setBlend(blendState.blend, blendState.blendEq, blendState.blendSrc, blendState.blendDst, blendState.blendAlphaEq, blendState.blendSrcAlpha, blendState.blendDstAlpha, blendState.blendColor);
      } // depth stencil state


      var depthStencilState = pass.depthStencilState;

      if (depthStencilState) {
        newPass.setDepth(depthStencilState.depthTest, depthStencilState.depthWrite, depthStencilState.depthFunc);
        newPass.setStencilFront(depthStencilState.stencilTest, depthStencilState.stencilFuncFront, depthStencilState.stencilRefFront, depthStencilState.stencilMaskFront, depthStencilState.stencilFailOpFront, depthStencilState.stencilZFailOpFront, depthStencilState.stencilZPassOpFront, depthStencilState.stencilWriteMaskFront);
        newPass.setStencilBack(depthStencilState.stencilTest, depthStencilState.stencilFuncBack, depthStencilState.stencilRefBack, depthStencilState.stencilMaskBack, depthStencilState.stencilFailOpBack, depthStencilState.stencilZFailOpBack, depthStencilState.stencilZPassOpBack, depthStencilState.stencilWriteMaskBack);
      }
    }

    techniques[j] = new _technique["default"](techName, passes);
  }

  return techniques;
}

;

function parseEffect(effect) {
  var techniques = parseTechniques(effect);
  return new _effect["default"](effect.name, techniques, 0, effect);
}

;

if (CC_EDITOR) {
  // inspector only need properties defined in CCEffect
  _effect["default"].parseForInspector = function (effectAsset) {
    return effectAsset.techniques.map(function (tech, techIdx) {
      var passes = tech.passes.map(function (pass, passIdx) {
        var program = getInvolvedProgram(pass.program);
        var newProps = {};
        var props = pass.properties;

        var _loop2 = function _loop2(name) {
          newProps[name] = (0, _types.getInspectorProps)(props[name]);
          var u = program.uniforms.find(function (u) {
            return u.name === name;
          });
          newProps[name].defines = u.defines || [];
        };

        for (var name in props) {
          _loop2(name);
        }

        var newDefines = {};
        program.defines.map(function (def) {
          newDefines[def.name] = (0, _types.getInspectorProps)(def);
        });
        return {
          name: pass.name || passIdx,
          props: newProps,
          defines: newDefines
        };
      });
      return {
        name: tech.name || techIdx,
        passes: passes
      };
    });
  };
}
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,