
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/3d/primitive/box.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}'use strict';

exports.__esModule = true;
exports["default"] = _default;

var _vec = _interopRequireDefault(require("../../value-types/vec3"));

var _vertexData = _interopRequireDefault(require("./vertex-data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var temp1 = new _vec["default"]();
var temp2 = new _vec["default"]();
var temp3 = new _vec["default"]();
var r = new _vec["default"]();
var c0 = new _vec["default"]();
var c1 = new _vec["default"]();
var c2 = new _vec["default"]();
var c3 = new _vec["default"]();
var c4 = new _vec["default"]();
var c5 = new _vec["default"]();
var c6 = new _vec["default"]();
var c7 = new _vec["default"]();
/**
 * @param {Number} width
 * @param {Number} height
 * @param {Number} length
 * @param {Object} opts
 * @param {Number} opts.widthSegments
 * @param {Number} opts.heightSegments
 * @param {Number} opts.lengthSegments
 */

function _default(width, height, length, opts) {
  if (width === void 0) {
    width = 1;
  }

  if (height === void 0) {
    height = 1;
  }

  if (length === void 0) {
    length = 1;
  }

  if (opts === void 0) {
    opts = {
      widthSegments: 1,
      heightSegments: 1,
      lengthSegments: 1,
      invWinding: false
    };
  }

  var ws = opts.widthSegments;
  var hs = opts.heightSegments;
  var ls = opts.lengthSegments;
  var inv = opts.invWinding;
  var hw = width * 0.5;
  var hh = height * 0.5;
  var hl = length * 0.5;
  var corners = [_vec["default"].set(c0, -hw, -hh, hl), _vec["default"].set(c1, hw, -hh, hl), _vec["default"].set(c2, hw, hh, hl), _vec["default"].set(c3, -hw, hh, hl), _vec["default"].set(c4, hw, -hh, -hl), _vec["default"].set(c5, -hw, -hh, -hl), _vec["default"].set(c6, -hw, hh, -hl), _vec["default"].set(c7, hw, hh, -hl)];
  var faceAxes = [[2, 3, 1], // FRONT
  [4, 5, 7], // BACK
  [7, 6, 2], // TOP
  [1, 0, 4], // BOTTOM
  [1, 4, 2], // RIGHT
  [5, 0, 6] // LEFT
  ];
  var faceNormals = [[0, 0, 1], // FRONT
  [0, 0, -1], // BACK
  [0, 1, 0], // TOP
  [0, -1, 0], // BOTTOM
  [1, 0, 0], // RIGHT
  [-1, 0, 0] // LEFT
  ];
  var positions = [];
  var normals = [];
  var uvs = [];
  var indices = [];
  var minPos = new _vec["default"](-hw, -hh, -hl);
  var maxPos = new _vec["default"](hw, hh, hl);
  var boundingRadius = Math.sqrt(hw * hw + hh * hh + hl * hl);

  function _buildPlane(side, uSegments, vSegments) {
    var u, v;
    var ix, iy;
    var offset = positions.length / 3;
    var faceAxe = faceAxes[side];
    var faceNormal = faceNormals[side];

    for (iy = 0; iy <= vSegments; iy++) {
      for (ix = 0; ix <= uSegments; ix++) {
        u = ix / uSegments;
        v = iy / vSegments;

        _vec["default"].lerp(temp1, corners[faceAxe[0]], corners[faceAxe[1]], u);

        _vec["default"].lerp(temp2, corners[faceAxe[0]], corners[faceAxe[2]], v);

        _vec["default"].subtract(temp3, temp2, corners[faceAxe[0]]);

        _vec["default"].add(r, temp1, temp3);

        positions.push(r.x, r.y, r.z);
        normals.push(faceNormal[0], faceNormal[1], faceNormal[2]);
        uvs.push(u, v);

        if (ix < uSegments && iy < vSegments) {
          var useg1 = uSegments + 1;
          var a = ix + iy * useg1;
          var b = ix + (iy + 1) * useg1;
          var c = ix + 1 + (iy + 1) * useg1;
          var d = ix + 1 + iy * useg1;

          if (inv) {
            indices.push(offset + a, offset + b, offset + d);
            indices.push(offset + d, offset + b, offset + c);
          } else {
            indices.push(offset + a, offset + d, offset + b);
            indices.push(offset + b, offset + d, offset + c);
          }
        }
      }
    }
  }

  _buildPlane(0, ws, hs); // FRONT


  _buildPlane(4, ls, hs); // RIGHT


  _buildPlane(1, ws, hs); // BACK


  _buildPlane(5, ls, hs); // LEFT


  _buildPlane(3, ws, ls); // BOTTOM


  _buildPlane(2, ws, ls); // TOP


  return new _vertexData["default"](positions, normals, uvs, indices, minPos, maxPos, boundingRadius);
}

module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,