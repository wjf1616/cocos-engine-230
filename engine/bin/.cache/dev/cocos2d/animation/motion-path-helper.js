
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/animation/motion-path-helper.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var DynamicAnimCurve = require('./animation-curves').DynamicAnimCurve;

var computeRatioByType = require('./animation-curves').computeRatioByType;

var bezier = require('./bezier').bezier;

var binarySearch = require('../core/utils/binary-search').binarySearchEpsilon;

var v2 = cc.v2;

function Curve(points) {
  this.points = points || [];
  this.beziers = [];
  this.ratios = [];
  this.progresses = [];
  this.length = 0;
  this.computeBeziers();
}

Curve.prototype.computeBeziers = function () {
  this.beziers.length = 0;
  this.ratios.length = 0;
  this.progresses.length = 0;
  this.length = 0;
  var bezier;

  for (var i = 1; i < this.points.length; i++) {
    var startPoint = this.points[i - 1];
    var endPoint = this.points[i];
    bezier = new Bezier();
    bezier.start = startPoint.pos;
    bezier.startCtrlPoint = startPoint.out;
    bezier.end = endPoint.pos;
    bezier.endCtrlPoint = endPoint["in"];
    this.beziers.push(bezier);
    this.length += bezier.getLength();
  }

  var current = 0;

  for (var i = 0; i < this.beziers.length; i++) {
    bezier = this.beziers[i];
    this.ratios[i] = bezier.getLength() / this.length;
    this.progresses[i] = current = current + this.ratios[i];
  }

  return this.beziers;
};

function Bezier() {
  this.start = v2();
  this.end = v2();
  this.startCtrlPoint = v2(); // cp0, cp1

  this.endCtrlPoint = v2(); // cp2, cp3
} // Get point at relative position in curve according to arc length
// - u [0 .. 1]


Bezier.prototype.getPointAt = function (u) {
  var t = this.getUtoTmapping(u);
  return this.getPoint(t);
}; // Get point at time t
//  - t [0 .. 1]


Bezier.prototype.getPoint = function (t) {
  var x = bezier(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, t);
  var y = bezier(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, t);
  return new v2(x, y);
}; // Get total curve arc length


Bezier.prototype.getLength = function () {
  var lengths = this.getLengths();
  return lengths[lengths.length - 1];
}; // Get list of cumulative segment lengths


Bezier.prototype.getLengths = function (divisions) {
  if (!divisions) divisions = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200;

  if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1) {
    //console.log( "cached", this.cacheArcLengths );
    return this.cacheArcLengths;
  }

  var cache = [];
  var current,
      last = this.getPoint(0),
      vector = v2();
  var p,
      sum = 0;
  cache.push(0);

  for (p = 1; p <= divisions; p++) {
    current = this.getPoint(p / divisions);
    vector.x = last.x - current.x;
    vector.y = last.y - current.y;
    sum += vector.mag();
    cache.push(sum);
    last = current;
  }

  this.cacheArcLengths = cache;
  return cache; // { sums: cache, sum:sum }; Sum is in the last element.
};

Bezier.prototype.getUtoTmapping = function (u, distance) {
  var arcLengths = this.getLengths();
  var i = 0,
      il = arcLengths.length;
  var targetArcLength; // The targeted u distance value to get

  if (distance) {
    targetArcLength = distance;
  } else {
    targetArcLength = u * arcLengths[il - 1];
  } //var time = Date.now();
  // binary search for the index with largest value smaller than target u distance


  var low = 0,
      high = il - 1,
      comparison;

  while (low <= high) {
    i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

    comparison = arcLengths[i] - targetArcLength;

    if (comparison < 0) {
      low = i + 1;
      continue;
    } else if (comparison > 0) {
      high = i - 1;
      continue;
    } else {
      high = i;
      break; // DONE
    }
  }

  i = high; //console.log('b' , i, low, high, Date.now()- time);

  if (arcLengths[i] === targetArcLength) {
    var t = i / (il - 1);
    return t;
  } // we could get finer grain at lengths, or use simple interpolatation between two points


  var lengthBefore = arcLengths[i];
  var lengthAfter = arcLengths[i + 1];
  var segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points

  var segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t

  var t = (i + segmentFraction) / (il - 1);
  return t;
};

function checkMotionPath(motionPath) {
  if (!Array.isArray(motionPath)) return false;

  for (var i = 0, l = motionPath.length; i < l; i++) {
    var controls = motionPath[i];
    if (!Array.isArray(controls) || controls.length !== 6) return false;
  }

  return true;
}

function sampleMotionPaths(motionPaths, data, duration, fps, target) {
  function createControlPoints(array) {
    if (array instanceof cc.Vec2) {
      return {
        "in": array,
        pos: array,
        out: array
      };
    } else if (Array.isArray(array) && array.length === 6) {
      return {
        "in": v2(array[2], array[3]),
        pos: v2(array[0], array[1]),
        out: v2(array[4], array[5])
      };
    }

    return {
      "in": cc.Vec2.ZERO,
      pos: cc.Vec2.ZERO,
      out: cc.Vec2.ZERO
    };
  }

  var values = data.values = data.values.map(function (value) {
    if (Array.isArray(value)) {
      value = value.length === 2 ? cc.v2(value[0], value[1]) : cc.v3(value[0], value[1], value[2]);
    }

    return value;
  });

  if (motionPaths.length === 0 || values.length === 0) {
    return;
  }

  var motionPathValid = false;

  for (var _i = 0; _i < motionPaths.length; _i++) {
    var _motionPath = motionPaths[_i];

    if (_motionPath && !checkMotionPath(_motionPath)) {
      cc.errorID(3904, target ? target.name : '', 'position', _i);
      _motionPath = null;
    }

    if (_motionPath && _motionPath.length > 0) {
      motionPathValid = true;
      break;
    }
  }

  if (!motionPathValid) {
    return;
  }

  if (values.length === 1) {
    return;
  }

  var types = data.types;
  var ratios = data.ratios;
  var newValues = data.values = [];
  var newTypes = data.types = [];
  var newRatios = data.ratios = [];

  function addNewDatas(value, type, ratio) {
    newValues.push(value);
    newTypes.push(type);
    newRatios.push(ratio);
  } // ensure every ratio section's length is the same


  var startRatioOffset = 0;
  var EPSILON = 1e-6;
  var newType = DynamicAnimCurve.Linear; // do not need to compute last path

  for (var i = 0, l = motionPaths.length; i < l - 1; i++) {
    var motionPath = motionPaths[i];
    var ratio = ratios[i];
    var nextRatio = ratios[i + 1];
    var betweenRatio = nextRatio - ratio;
    var value = values[i];
    var nextValue = values[i + 1];
    var type = types[i];
    var results = [];
    var progress = startRatioOffset / betweenRatio;
    var speed = 1 / (betweenRatio * duration * fps);
    var finalProgress;

    if (motionPath && motionPath.length > 0) {
      var points = [];
      points.push(createControlPoints(value));

      for (var j = 0, l2 = motionPath.length; j < l2; j++) {
        var controlPoints = createControlPoints(motionPath[j]);
        points.push(controlPoints);
      }

      points.push(createControlPoints(nextValue)); // create Curve to compute beziers

      var curve = new Curve(points);
      curve.computeBeziers(); // sample beziers

      var progresses = curve.progresses;

      while (1 - progress > EPSILON) {
        finalProgress = progress;
        finalProgress = computeRatioByType(finalProgress, type);
        var pos, bezier, normal, length;

        if (finalProgress < 0) {
          bezier = curve.beziers[0];
          length = (0 - finalProgress) * bezier.getLength();
          normal = bezier.start.sub(bezier.endCtrlPoint).normalize();
          pos = bezier.start.add(normal.mul(length));
        } else if (finalProgress > 1) {
          bezier = curve.beziers[curve.beziers.length - 1];
          length = (finalProgress - 1) * bezier.getLength();
          normal = bezier.end.sub(bezier.startCtrlPoint).normalize();
          pos = bezier.end.add(normal.mul(length));
        } else {
          var bezierIndex = binarySearch(progresses, finalProgress);
          if (bezierIndex < 0) bezierIndex = ~bezierIndex;
          finalProgress -= bezierIndex > 0 ? progresses[bezierIndex - 1] : 0;
          finalProgress = finalProgress / curve.ratios[bezierIndex];
          pos = curve.beziers[bezierIndex].getPointAt(finalProgress);
        }

        results.push(pos);
        progress += speed;
      }
    } else {
      while (1 - progress > EPSILON) {
        finalProgress = progress;
        finalProgress = computeRatioByType(finalProgress, type);
        results.push(value.lerp(nextValue, finalProgress));
        progress += speed;
      }
    }

    newType = type === 'constant' ? type : DynamicAnimCurve.Linear;

    for (var j = 0, l2 = results.length; j < l2; j++) {
      var newRatio = ratio + startRatioOffset + speed * j * betweenRatio;
      addNewDatas(results[j], newType, newRatio);
    }

    if (Math.abs(progress - 1) > EPSILON) // progress > 1
      startRatioOffset = (progress - 1) * betweenRatio;else startRatioOffset = 0;
  }

  if (ratios[ratios.length - 1] !== newRatios[newRatios.length - 1]) {
    addNewDatas(values[values.length - 1], newType, ratios[ratios.length - 1]);
  }
}

if (CC_TEST) {
  cc._Test.sampleMotionPaths = sampleMotionPaths;
}

module.exports = {
  sampleMotionPaths: sampleMotionPaths,
  Curve: Curve,
  Bezier: Bezier
};
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vdGlvbi1wYXRoLWhlbHBlci5qcyJdLCJuYW1lcyI6WyJEeW5hbWljQW5pbUN1cnZlIiwicmVxdWlyZSIsImNvbXB1dGVSYXRpb0J5VHlwZSIsImJlemllciIsImJpbmFyeVNlYXJjaCIsImJpbmFyeVNlYXJjaEVwc2lsb24iLCJ2MiIsImNjIiwiQ3VydmUiLCJwb2ludHMiLCJiZXppZXJzIiwicmF0aW9zIiwicHJvZ3Jlc3NlcyIsImxlbmd0aCIsImNvbXB1dGVCZXppZXJzIiwicHJvdG90eXBlIiwiaSIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsIkJlemllciIsInN0YXJ0IiwicG9zIiwic3RhcnRDdHJsUG9pbnQiLCJvdXQiLCJlbmQiLCJlbmRDdHJsUG9pbnQiLCJwdXNoIiwiZ2V0TGVuZ3RoIiwiY3VycmVudCIsImdldFBvaW50QXQiLCJ1IiwidCIsImdldFV0b1RtYXBwaW5nIiwiZ2V0UG9pbnQiLCJ4IiwieSIsImxlbmd0aHMiLCJnZXRMZW5ndGhzIiwiZGl2aXNpb25zIiwiX19hcmNMZW5ndGhEaXZpc2lvbnMiLCJjYWNoZUFyY0xlbmd0aHMiLCJjYWNoZSIsImxhc3QiLCJ2ZWN0b3IiLCJwIiwic3VtIiwibWFnIiwiZGlzdGFuY2UiLCJhcmNMZW5ndGhzIiwiaWwiLCJ0YXJnZXRBcmNMZW5ndGgiLCJsb3ciLCJoaWdoIiwiY29tcGFyaXNvbiIsIk1hdGgiLCJmbG9vciIsImxlbmd0aEJlZm9yZSIsImxlbmd0aEFmdGVyIiwic2VnbWVudExlbmd0aCIsInNlZ21lbnRGcmFjdGlvbiIsImNoZWNrTW90aW9uUGF0aCIsIm1vdGlvblBhdGgiLCJBcnJheSIsImlzQXJyYXkiLCJsIiwiY29udHJvbHMiLCJzYW1wbGVNb3Rpb25QYXRocyIsIm1vdGlvblBhdGhzIiwiZGF0YSIsImR1cmF0aW9uIiwiZnBzIiwidGFyZ2V0IiwiY3JlYXRlQ29udHJvbFBvaW50cyIsImFycmF5IiwiVmVjMiIsIlpFUk8iLCJ2YWx1ZXMiLCJtYXAiLCJ2YWx1ZSIsInYzIiwibW90aW9uUGF0aFZhbGlkIiwiZXJyb3JJRCIsIm5hbWUiLCJ0eXBlcyIsIm5ld1ZhbHVlcyIsIm5ld1R5cGVzIiwibmV3UmF0aW9zIiwiYWRkTmV3RGF0YXMiLCJ0eXBlIiwicmF0aW8iLCJzdGFydFJhdGlvT2Zmc2V0IiwiRVBTSUxPTiIsIm5ld1R5cGUiLCJMaW5lYXIiLCJuZXh0UmF0aW8iLCJiZXR3ZWVuUmF0aW8iLCJuZXh0VmFsdWUiLCJyZXN1bHRzIiwicHJvZ3Jlc3MiLCJzcGVlZCIsImZpbmFsUHJvZ3Jlc3MiLCJqIiwibDIiLCJjb250cm9sUG9pbnRzIiwiY3VydmUiLCJub3JtYWwiLCJzdWIiLCJub3JtYWxpemUiLCJhZGQiLCJtdWwiLCJiZXppZXJJbmRleCIsImxlcnAiLCJuZXdSYXRpbyIsImFicyIsIkNDX1RFU1QiLCJfVGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLElBQUlBLGdCQUFnQixHQUFHQyxPQUFPLENBQUMsb0JBQUQsQ0FBUCxDQUE4QkQsZ0JBQXJEOztBQUNBLElBQUlFLGtCQUFrQixHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FBUCxDQUE4QkMsa0JBQXZEOztBQUVBLElBQUlDLE1BQU0sR0FBR0YsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkUsTUFBakM7O0FBQ0EsSUFBSUMsWUFBWSxHQUFHSCxPQUFPLENBQUMsNkJBQUQsQ0FBUCxDQUF1Q0ksbUJBQTFEOztBQUVBLElBQUlDLEVBQUUsR0FBR0MsRUFBRSxDQUFDRCxFQUFaOztBQUVBLFNBQVNFLEtBQVQsQ0FBZ0JDLE1BQWhCLEVBQXdCO0FBQ3BCLE9BQUtBLE1BQUwsR0FBY0EsTUFBTSxJQUFJLEVBQXhCO0FBQ0EsT0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxPQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNBLE9BQUtDLFVBQUwsR0FBa0IsRUFBbEI7QUFFQSxPQUFLQyxNQUFMLEdBQWMsQ0FBZDtBQUVB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QUN6RSxNQUFWLEdBQWtCLENBQW5CLENBQTNDLEVBQWtFO0FBQzlEMEUsSUFBQUEsV0FBVyxDQUFDWCxNQUFNLENBQUNBLE1BQU0sQ0FBQy9ELE1BQVAsR0FBZ0IsQ0FBakIsQ0FBUCxFQUE0QitFLE9BQTVCLEVBQXFDakYsTUFBTSxDQUFDQSxNQUFNLENBQUNFLE1BQVAsR0FBZ0IsQ0FBakIsQ0FBM0MsQ0FBWDtBQUNIO0FBQ0o7O0FBRUQsSUFBSXFHLE9BQUosRUFBYTtBQUNUM0csRUFBQUEsRUFBRSxDQUFDNEcsS0FBSCxDQUFTakQsaUJBQVQsR0FBNkJBLGlCQUE3QjtBQUNIOztBQUVEa0QsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JuRCxFQUFBQSxpQkFBaUIsRUFBRUEsaUJBRE47QUFFYjFELEVBQUFBLEtBQUssRUFBRUEsS0FGTTtBQUdiVyxFQUFBQSxNQUFNLEVBQUVBO0FBSEssQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgRHluYW1pY0FuaW1DdXJ2ZSA9IHJlcXVpcmUoJy4vYW5pbWF0aW9uLWN1cnZlcycpLkR5bmFtaWNBbmltQ3VydmU7XG52YXIgY29tcHV0ZVJhdGlvQnlUeXBlID0gcmVxdWlyZSgnLi9hbmltYXRpb24tY3VydmVzJykuY29tcHV0ZVJhdGlvQnlUeXBlO1xuXG52YXIgYmV6aWVyID0gcmVxdWlyZSgnLi9iZXppZXInKS5iZXppZXI7XG52YXIgYmluYXJ5U2VhcmNoID0gcmVxdWlyZSgnLi4vY29yZS91dGlscy9iaW5hcnktc2VhcmNoJykuYmluYXJ5U2VhcmNoRXBzaWxvbjtcblxudmFyIHYyID0gY2MudjI7XG5cbmZ1bmN0aW9uIEN1cnZlIChwb2ludHMpIHtcbiAgICB0aGlzLnBvaW50cyA9IHBvaW50cyB8fCBbXTtcbiAgICB0aGlzLmJlemllcnMgPSBbXTtcbiAgICB0aGlzLnJhdGlvcyA9IFtdO1xuICAgIHRoaXMucHJvZ3Jlc3NlcyA9IFtdO1xuXG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgdGhpcy5jb21wdXRlQmV6aWVycygpO1xufVxuQ3VydmUucHJvdG90eXBlLmNvbXB1dGVCZXppZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYmV6aWVycy5sZW5ndGggPSAwO1xuICAgIHRoaXMucmF0aW9zLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5wcm9ncmVzc2VzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgdmFyIGJlemllcjtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0YXJ0UG9pbnQgPSB0aGlzLnBvaW50c1tpIC0gMV07XG4gICAgICAgIHZhciBlbmRQb2ludCA9IHRoaXMucG9pbnRzW2ldO1xuICAgICAgICBiZXppZXIgPSBuZXcgQmV6aWVyKCk7XG4gICAgICAgIGJlemllci5zdGFydCA9IHN0YXJ0UG9pbnQucG9zO1xuICAgICAgICBiZXppZXIuc3RhcnRDdHJsUG9pbnQgPSBzdGFydFBvaW50Lm91dDtcbiAgICAgICAgYmV6aWVyLmVuZCA9IGVuZFBvaW50LnBvcztcbiAgICAgICAgYmV6aWVyLmVuZEN0cmxQb2ludCA9IGVuZFBvaW50LmluO1xuICAgICAgICB0aGlzLmJlemllcnMucHVzaChiZXppZXIpO1xuXG4gICAgICAgIHRoaXMubGVuZ3RoICs9IGJlemllci5nZXRMZW5ndGgoKTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJlemllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYmV6aWVyID0gdGhpcy5iZXppZXJzW2ldO1xuICAgICAgICB0aGlzLnJhdGlvc1tpXSA9IGJlemllci5nZXRMZW5ndGgoKSAvIHRoaXMubGVuZ3RoO1xuICAgICAgICB0aGlzLnByb2dyZXNzZXNbaV0gPSBjdXJyZW50ID0gY3VycmVudCArIHRoaXMucmF0aW9zW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJlemllcnM7XG59O1xuXG5mdW5jdGlvbiBCZXppZXIgKCkge1xuICAgIHRoaXMuc3RhcnQgPSB2MigpO1xuICAgIHRoaXMuZW5kID0gdjIoKTtcbiAgICB0aGlzLnN0YXJ0Q3RybFBvaW50ID0gdjIoKTsgLy8gY3AwLCBjcDFcbiAgICB0aGlzLmVuZEN0cmxQb2ludCA9IHYyKCk7ICAgLy8gY3AyLCBjcDNcbn1cblxuLy8gR2V0IHBvaW50IGF0IHJlbGF0aXZlIHBvc2l0aW9uIGluIGN1cnZlIGFjY29yZGluZyB0byBhcmMgbGVuZ3RoXG4vLyAtIHUgWzAgLi4gMV1cbkJlemllci5wcm90b3R5cGUuZ2V0UG9pbnRBdCA9IGZ1bmN0aW9uICggdSApIHtcbiAgICB2YXIgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcoIHUgKTtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludCggdCApO1xufTtcblxuXG4vLyBHZXQgcG9pbnQgYXQgdGltZSB0XG4vLyAgLSB0IFswIC4uIDFdXG5CZXppZXIucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0ICkge1xuICAgIHZhciB4ID0gYmV6aWVyKHRoaXMuc3RhcnQueCwgdGhpcy5zdGFydEN0cmxQb2ludC54LCB0aGlzLmVuZEN0cmxQb2ludC54LCB0aGlzLmVuZC54LCB0KTtcbiAgICB2YXIgeSA9IGJlemllcih0aGlzLnN0YXJ0LnksIHRoaXMuc3RhcnRDdHJsUG9pbnQueSwgdGhpcy5lbmRDdHJsUG9pbnQueSwgdGhpcy5lbmQueSwgdCk7XG5cbiAgICByZXR1cm4gbmV3IHYyKHgsIHkpO1xufTtcblxuLy8gR2V0IHRvdGFsIGN1cnZlIGFyYyBsZW5ndGhcbkJlemllci5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGxlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcbiAgICByZXR1cm4gbGVuZ3Roc1sgbGVuZ3Rocy5sZW5ndGggLSAxIF07XG5cbn07XG5cbi8vIEdldCBsaXN0IG9mIGN1bXVsYXRpdmUgc2VnbWVudCBsZW5ndGhzXG5CZXppZXIucHJvdG90eXBlLmdldExlbmd0aHMgPSBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuICAgIGlmICggISBkaXZpc2lvbnMgKSBkaXZpc2lvbnMgPSAodGhpcy5fX2FyY0xlbmd0aERpdmlzaW9ucykgPyAodGhpcy5fX2FyY0xlbmd0aERpdmlzaW9ucyk6IDIwMDtcblxuICAgIGlmICggdGhpcy5jYWNoZUFyY0xlbmd0aHNcbiAgICAgICAgJiYgKCB0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGggPT09IGRpdmlzaW9ucyArIDEgKSkge1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coIFwiY2FjaGVkXCIsIHRoaXMuY2FjaGVBcmNMZW5ndGhzICk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3RocztcblxuICAgIH1cblxuICAgIHZhciBjYWNoZSA9IFtdO1xuICAgIHZhciBjdXJyZW50LCBsYXN0ID0gdGhpcy5nZXRQb2ludCggMCApLCB2ZWN0b3IgPSB2MigpO1xuICAgIHZhciBwLCBzdW0gPSAwO1xuXG4gICAgY2FjaGUucHVzaCggMCApO1xuXG4gICAgZm9yICggcCA9IDE7IHAgPD0gZGl2aXNpb25zOyBwICsrICkge1xuXG4gICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldFBvaW50ICggcCAvIGRpdmlzaW9ucyApO1xuICAgICAgICB2ZWN0b3IueCA9IGxhc3QueCAtIGN1cnJlbnQueDtcbiAgICAgICAgdmVjdG9yLnkgPSBsYXN0LnkgLSBjdXJyZW50Lnk7XG4gICAgICAgIHN1bSArPSB2ZWN0b3IubWFnKCk7XG4gICAgICAgIGNhY2hlLnB1c2goIHN1bSApO1xuICAgICAgICBsYXN0ID0gY3VycmVudDtcblxuICAgIH1cblxuICAgIHRoaXMuY2FjaGVBcmNMZW5ndGhzID0gY2FjaGU7XG5cbiAgICByZXR1cm4gY2FjaGU7IC8vIHsgc3VtczogY2FjaGUsIHN1bTpzdW0gfTsgU3VtIGlzIGluIHRoZSBsYXN0IGVsZW1lbnQuXG59O1xuXG5CZXppZXIucHJvdG90eXBlLmdldFV0b1RtYXBwaW5nID0gZnVuY3Rpb24gKCB1LCBkaXN0YW5jZSApIHtcblxuICAgIHZhciBhcmNMZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XG5cbiAgICB2YXIgaSA9IDAsIGlsID0gYXJjTGVuZ3Rocy5sZW5ndGg7XG5cbiAgICB2YXIgdGFyZ2V0QXJjTGVuZ3RoOyAvLyBUaGUgdGFyZ2V0ZWQgdSBkaXN0YW5jZSB2YWx1ZSB0byBnZXRcblxuICAgIGlmICggZGlzdGFuY2UgKSB7XG4gICAgICAgIHRhcmdldEFyY0xlbmd0aCA9IGRpc3RhbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldEFyY0xlbmd0aCA9IHUgKiBhcmNMZW5ndGhzWyBpbCAtIDEgXTtcbiAgICB9XG5cbiAgICAvL3ZhciB0aW1lID0gRGF0ZS5ub3coKTtcblxuICAgIC8vIGJpbmFyeSBzZWFyY2ggZm9yIHRoZSBpbmRleCB3aXRoIGxhcmdlc3QgdmFsdWUgc21hbGxlciB0aGFuIHRhcmdldCB1IGRpc3RhbmNlXG5cbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGlsIC0gMSwgY29tcGFyaXNvbjtcblxuICAgIHdoaWxlICggbG93IDw9IGhpZ2ggKSB7XG5cbiAgICAgICAgaSA9IE1hdGguZmxvb3IoIGxvdyArICggaGlnaCAtIGxvdyApIC8gMiApOyAvLyBsZXNzIGxpa2VseSB0byBvdmVyZmxvdywgdGhvdWdoIHByb2JhYmx5IG5vdCBpc3N1ZSBoZXJlLCBKUyBkb2Vzbid0IHJlYWxseSBoYXZlIGludGVnZXJzLCBhbGwgbnVtYmVycyBhcmUgZmxvYXRzXG5cbiAgICAgICAgY29tcGFyaXNvbiA9IGFyY0xlbmd0aHNbIGkgXSAtIHRhcmdldEFyY0xlbmd0aDtcblxuICAgICAgICBpZiAoIGNvbXBhcmlzb24gPCAwICkge1xuXG4gICAgICAgICAgICBsb3cgPSBpICsgMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIGNvbXBhcmlzb24gPiAwICkge1xuXG4gICAgICAgICAgICBoaWdoID0gaSAtIDE7XG4gICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBoaWdoID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBET05FXG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgaSA9IGhpZ2g7XG5cbiAgICAvL2NvbnNvbGUubG9nKCdiJyAsIGksIGxvdywgaGlnaCwgRGF0ZS5ub3coKS0gdGltZSk7XG5cbiAgICBpZiAoIGFyY0xlbmd0aHNbIGkgXSA9PT0gdGFyZ2V0QXJjTGVuZ3RoICkge1xuXG4gICAgICAgIHZhciB0ID0gaSAvICggaWwgLSAxICk7XG4gICAgICAgIHJldHVybiB0O1xuXG4gICAgfVxuXG4gICAgLy8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGF0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuXG4gICAgdmFyIGxlbmd0aEJlZm9yZSA9IGFyY0xlbmd0aHNbIGkgXTtcbiAgICB2YXIgbGVuZ3RoQWZ0ZXIgPSBhcmNMZW5ndGhzWyBpICsgMSBdO1xuXG4gICAgdmFyIHNlZ21lbnRMZW5ndGggPSBsZW5ndGhBZnRlciAtIGxlbmd0aEJlZm9yZTtcblxuICAgIC8vIGRldGVybWluZSB3aGVyZSB3ZSBhcmUgYmV0d2VlbiB0aGUgJ2JlZm9yZScgYW5kICdhZnRlcicgcG9pbnRzXG5cbiAgICB2YXIgc2VnbWVudEZyYWN0aW9uID0gKCB0YXJnZXRBcmNMZW5ndGggLSBsZW5ndGhCZWZvcmUgKSAvIHNlZ21lbnRMZW5ndGg7XG5cbiAgICAvLyBhZGQgdGhhdCBmcmFjdGlvbmFsIGFtb3VudCB0byB0XG5cbiAgICB2YXIgdCA9ICggaSArIHNlZ21lbnRGcmFjdGlvbiApIC8gKCBpbCAtMSApO1xuXG4gICAgcmV0dXJuIHQ7XG59O1xuXG5cbmZ1bmN0aW9uIGNoZWNrTW90aW9uUGF0aChtb3Rpb25QYXRoKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1vdGlvblBhdGgpKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IG1vdGlvblBhdGgubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IG1vdGlvblBhdGhbaV07XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbnRyb2xzKSB8fCBjb250cm9scy5sZW5ndGggIT09IDYpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2FtcGxlTW90aW9uUGF0aHMgKG1vdGlvblBhdGhzLCBkYXRhLCBkdXJhdGlvbiwgZnBzLCB0YXJnZXQpIHtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xQb2ludHMoYXJyYXkpIHtcbiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgY2MuVmVjMikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbjogYXJyYXksXG4gICAgICAgICAgICAgICAgcG9zOiBhcnJheSxcbiAgICAgICAgICAgICAgICBvdXQ6IGFycmF5XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXkpICYmIGFycmF5Lmxlbmd0aCA9PT0gNikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbjogdjIoYXJyYXlbMl0sIGFycmF5WzNdKSxcbiAgICAgICAgICAgICAgICBwb3M6IHYyKGFycmF5WzBdLCBhcnJheVsxXSksXG4gICAgICAgICAgICAgICAgb3V0OiB2MihhcnJheVs0XSwgYXJyYXlbNV0pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluOiBjYy5WZWMyLlpFUk8sXG4gICAgICAgICAgICBwb3M6IGNjLlZlYzIuWkVSTyxcbiAgICAgICAgICAgIG91dDogY2MuVmVjMi5aRVJPXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHZhbHVlcyA9IGRhdGEudmFsdWVzID0gZGF0YS52YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUubGVuZ3RoID09PSAyID8gY2MudjIodmFsdWVbMF0sIHZhbHVlWzFdKSA6IGNjLnYzKHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcblxuICAgIGlmIChtb3Rpb25QYXRocy5sZW5ndGggPT09IDAgfHwgdmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG1vdGlvblBhdGhWYWxpZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uUGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG1vdGlvblBhdGggPSBtb3Rpb25QYXRoc1tpXTtcbiAgICAgICAgaWYgKG1vdGlvblBhdGggJiYgIWNoZWNrTW90aW9uUGF0aChtb3Rpb25QYXRoKSkge1xuICAgICAgICAgICAgY2MuZXJyb3JJRCgzOTA0LCB0YXJnZXQgPyB0YXJnZXQubmFtZSA6ICcnLCAncG9zaXRpb24nLCBpKTtcbiAgICAgICAgICAgIG1vdGlvblBhdGggPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb3Rpb25QYXRoICYmIG1vdGlvblBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbW90aW9uUGF0aFZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFtb3Rpb25QYXRoVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdHlwZXMgPSBkYXRhLnR5cGVzO1xuICAgIHZhciByYXRpb3MgPSBkYXRhLnJhdGlvcztcblxuICAgIHZhciBuZXdWYWx1ZXMgPSBkYXRhLnZhbHVlcyA9IFtdO1xuICAgIHZhciBuZXdUeXBlcyA9IGRhdGEudHlwZXMgPSBbXTtcbiAgICB2YXIgbmV3UmF0aW9zID0gZGF0YS5yYXRpb3MgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFkZE5ld0RhdGFzICh2YWx1ZSwgdHlwZSwgcmF0aW8pIHtcbiAgICAgICAgbmV3VmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICBuZXdUeXBlcy5wdXNoKHR5cGUpO1xuICAgICAgICBuZXdSYXRpb3MucHVzaChyYXRpbyk7XG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGV2ZXJ5IHJhdGlvIHNlY3Rpb24ncyBsZW5ndGggaXMgdGhlIHNhbWVcbiAgICB2YXIgc3RhcnRSYXRpb09mZnNldCA9IDA7XG5cbiAgICB2YXIgRVBTSUxPTiA9IDFlLTY7XG4gICAgdmFyIG5ld1R5cGUgPSBEeW5hbWljQW5pbUN1cnZlLkxpbmVhcjtcblxuICAgIC8vIGRvIG5vdCBuZWVkIHRvIGNvbXB1dGUgbGFzdCBwYXRoXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBtb3Rpb25QYXRocy5sZW5ndGg7IGkgPCBsLTE7IGkrKykge1xuICAgICAgICB2YXIgbW90aW9uUGF0aCA9IG1vdGlvblBhdGhzW2ldO1xuXG4gICAgICAgIHZhciByYXRpbyA9IHJhdGlvc1tpXTtcbiAgICAgICAgdmFyIG5leHRSYXRpbyA9IHJhdGlvc1tpICsgMV07XG4gICAgICAgIHZhciBiZXR3ZWVuUmF0aW8gPSBuZXh0UmF0aW8gLSByYXRpbztcblxuICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSB2YWx1ZXNbaSArIDFdO1xuXG4gICAgICAgIHZhciB0eXBlID0gdHlwZXNbaV07XG5cbiAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgdmFyIHByb2dyZXNzID0gc3RhcnRSYXRpb09mZnNldCAvIGJldHdlZW5SYXRpbztcbiAgICAgICAgdmFyIHNwZWVkID0gMSAvIChiZXR3ZWVuUmF0aW8gKiBkdXJhdGlvbiAqIGZwcyk7XG4gICAgICAgIHZhciBmaW5hbFByb2dyZXNzO1xuXG4gICAgICAgIGlmIChtb3Rpb25QYXRoICYmIG1vdGlvblBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goY3JlYXRlQ29udHJvbFBvaW50cyh2YWx1ZSkpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbDIgPSBtb3Rpb25QYXRoLmxlbmd0aDsgaiA8IGwyOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbFBvaW50cyA9IGNyZWF0ZUNvbnRyb2xQb2ludHMobW90aW9uUGF0aFtqXSk7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY29udHJvbFBvaW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvaW50cy5wdXNoKGNyZWF0ZUNvbnRyb2xQb2ludHMobmV4dFZhbHVlKSk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBDdXJ2ZSB0byBjb21wdXRlIGJlemllcnNcbiAgICAgICAgICAgIHZhciBjdXJ2ZSA9IG5ldyBDdXJ2ZShwb2ludHMpO1xuICAgICAgICAgICAgY3VydmUuY29tcHV0ZUJlemllcnMoKTtcblxuICAgICAgICAgICAgLy8gc2FtcGxlIGJlemllcnNcbiAgICAgICAgICAgIHZhciBwcm9ncmVzc2VzID0gY3VydmUucHJvZ3Jlc3NlcztcblxuICAgICAgICAgICAgd2hpbGUgKCAxIC0gcHJvZ3Jlc3MgPiBFUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgZmluYWxQcm9ncmVzcyA9IHByb2dyZXNzO1xuXG4gICAgICAgICAgICAgICAgZmluYWxQcm9ncmVzcyA9IGNvbXB1dGVSYXRpb0J5VHlwZShmaW5hbFByb2dyZXNzLCB0eXBlKTtcblxuICAgICAgICAgICAgICAgIHZhciBwb3MsIGJlemllciwgbm9ybWFsLCBsZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmluYWxQcm9ncmVzcyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYmV6aWVyID0gY3VydmUuYmV6aWVyc1swXTtcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gICgwIC0gZmluYWxQcm9ncmVzcykgKiBiZXppZXIuZ2V0TGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbCA9IGJlemllci5zdGFydC5zdWIoYmV6aWVyLmVuZEN0cmxQb2ludCkubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IGJlemllci5zdGFydC5hZGQobm9ybWFsLm11bChsZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmluYWxQcm9ncmVzcyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYmV6aWVyID0gY3VydmUuYmV6aWVyc1tjdXJ2ZS5iZXppZXJzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSAgKGZpbmFsUHJvZ3Jlc3MgLSAxKSAqIGJlemllci5nZXRMZW5ndGgoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsID0gYmV6aWVyLmVuZC5zdWIoYmV6aWVyLnN0YXJ0Q3RybFBvaW50KS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zID0gYmV6aWVyLmVuZC5hZGQobm9ybWFsLm11bChsZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiZXppZXJJbmRleCA9IGJpbmFyeVNlYXJjaChwcm9ncmVzc2VzLCBmaW5hbFByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlemllckluZGV4IDwgMCkgYmV6aWVySW5kZXggPSB+YmV6aWVySW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgZmluYWxQcm9ncmVzcyAtPSBiZXppZXJJbmRleCA+IDAgPyBwcm9ncmVzc2VzW2JlemllckluZGV4IC0gMV0gOiAwO1xuICAgICAgICAgICAgICAgICAgICBmaW5hbFByb2dyZXNzID0gZmluYWxQcm9ncmVzcyAvIGN1cnZlLnJhdGlvc1tiZXppZXJJbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgcG9zID0gY3VydmUuYmV6aWVyc1tiZXppZXJJbmRleF0uZ2V0UG9pbnRBdChmaW5hbFByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocG9zKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcyArPSBzcGVlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKCAxIC0gcHJvZ3Jlc3MgPiBFUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgZmluYWxQcm9ncmVzcyA9IHByb2dyZXNzO1xuXG4gICAgICAgICAgICAgICAgZmluYWxQcm9ncmVzcyA9IGNvbXB1dGVSYXRpb0J5VHlwZShmaW5hbFByb2dyZXNzLCB0eXBlKTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2YWx1ZS5sZXJwKG5leHRWYWx1ZSwgZmluYWxQcm9ncmVzcykpO1xuXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gc3BlZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXdUeXBlID0gdHlwZSA9PT0gJ2NvbnN0YW50JyA/IHR5cGUgOiBEeW5hbWljQW5pbUN1cnZlLkxpbmVhcjtcblxuICAgICAgICBmb3IgKHZhciBqID0gMCwgbDIgPSByZXN1bHRzLmxlbmd0aDsgaiA8IGwyOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBuZXdSYXRpbyA9IHJhdGlvICsgc3RhcnRSYXRpb09mZnNldCArIHNwZWVkICogaiAqIGJldHdlZW5SYXRpbztcbiAgICAgICAgICAgIGFkZE5ld0RhdGFzKHJlc3VsdHNbal0sIG5ld1R5cGUsIG5ld1JhdGlvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChNYXRoLmFicyhwcm9ncmVzcyAtIDEpID4gRVBTSUxPTikgLy8gcHJvZ3Jlc3MgPiAxXG4gICAgICAgICAgICBzdGFydFJhdGlvT2Zmc2V0ID0gKHByb2dyZXNzIC0gMSkgKiBiZXR3ZWVuUmF0aW87XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHN0YXJ0UmF0aW9PZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChyYXRpb3NbcmF0aW9zLmxlbmd0aCAtIDFdICE9PSBuZXdSYXRpb3NbbmV3UmF0aW9zLmxlbmd0aCAtMV0pIHtcbiAgICAgICAgYWRkTmV3RGF0YXModmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXSwgbmV3VHlwZSwgcmF0aW9zW3JhdGlvcy5sZW5ndGggLSAxXSk7XG4gICAgfVxufVxuXG5pZiAoQ0NfVEVTVCkge1xuICAgIGNjLl9UZXN0LnNhbXBsZU1vdGlvblBhdGhzID0gc2FtcGxlTW90aW9uUGF0aHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNhbXBsZU1vdGlvblBhdGhzOiBzYW1wbGVNb3Rpb25QYXRocyxcbiAgICBDdXJ2ZTogQ3VydmUsXG4gICAgQmV6aWVyOiBCZXppZXJcbn07XG4iXX0=